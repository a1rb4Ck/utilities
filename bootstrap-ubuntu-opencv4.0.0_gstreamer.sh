#!/bin/bash
#
# Bootstrap a new Debian/Ubuntu installation for Computer Vision.
#
#   One command to install all mandatory dependencies.
#
echo 'This will install a "cv" virtualenv for Computer Vision'
exho '  with a custom OpenCV4.0.0 wih GStreamer support.'
echo '** ** ** ** ** ** ** ** ** ** **'

echo '** Updating package repositories'
sudo apt-get update && sudo apt-get upgrade -y

echo ''
echo '** Installing essential packages'
sudo apt-get install -y apt-file cowsay curl direnv flake8 fortune git htop mosh openssl \
    openconnect redis silversearcher-ag snap tmux zsh

# Hardware monitoring
echo ''
echo '** Setting up hardware sensors'
sudo apt-get install hddtemp lm-sensors indicator-multiload psensor -y
# sudo sensors-detect  # run this to find which sensor is on board
sudo sh -c "echo '# Generated by a previous sensors-detect, plz re-run if needed' >> /etc/modules"
sudo sh -c "echo '# Chip drivers' >> /etc/modules"
sudo sh -c "echo 'coretemp' >> /etc/modules"
sensors

# Custom motd
# 00-header: remove last line, add same last line with green color.
sudo dd if=/dev/null of=/etc/update-motd.d/00-header bs=1 seek=$(echo $(stat --format=%s /etc/update-motd.d/00-header ) - $( tail -n1 /etc/update-motd.d/00-header | wc -c) | bc )
echo 'printf "\\033[1;32mWelcome to %s (%s %s %s)\\n\\033[0m" "$DISTRIB_DESCRIPTION" "$(uname -o)" "$(uname -r)" "$(uname -m)"' | sudo tee -a /etc/update-motd.d/00-header > /dev/null
# 10-help-text: remove info about Canonical docs
sudo chmod -x /etc/update-motd.d/10-help-text
# 20-sysinfo: copied from https://github.com/xtrinch/update-motd.d/blob/master/10-sysinfo
sudo cp ./dotfiles/20-sysinfo /etc/update-motd.d/20-sysinfo
sudo chmod +x /etc/update-motd.d/20-sysinfo
# 50-motd-news: Disable motd news
sudo chmod -x /etc/update-motd.d/50-motd-news
# 80-livepatch: Disable livepatch infos
sudo chmod -x /etc/update-motd.d/80-livepatch
# 99-fortune: Display a fortune quote.
echo '#!/bin/sh\n\necho "\e[00;35m$(/usr/games/fortune | /usr/games/cowsay)\e[00m"\n' | sudo tee /etc/update-motd.d/99-fortune > /dev/null

sudo chmod +x /etc/update-motd.d/99-fortune

## Applications
echo ''
echo '** App: GitHub Desktop, Sublime Text, Syncthing, VLC'
wget https://github.com/shiftkey/desktop/releases/download/release-1.5.0-linux5/GitHubDesktop-linux-1.5.0-linux5.deb
sudo dpkg -i GitHubDesktop-linux-1.5.0-linux5.deb
sudo apt-get install -f -y
rm -f GitHubDesktop-linux-1.5.0-linux5.deb

wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
curl -s https://syncthing.net/release-key.txt | sudo apt-key add -
echo "deb http://apt.syncthing.net/ syncthing release" | sudo tee /etc/apt/sources.list.d/syncthing.list
sudo add-apt-repository ppa:peterlevi/ppa -y

sudo apt-get update
sudo apt-get install 
sudo apt-get install sublime-text syncthing variety -y
sudo systemctl enable syncthing@$USER.service
sudo systemctl start syncthing@$USER.service
sudo snap install vlc

## Oh-My-Zsh!
echo ''
echo '** Oh-My-Zsh!'
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

# dot files
cp ./dotfiles/.direnvrc $HOME/.direnvrc
cp ./dotfiles/.zshrc $HOME/.zshrc

## tmux configuration
echo ''
echo '** tmux'
git clone https://github.com/gpakosz/.tmux.git
ln -s -f .tmux/.tmux.conf
cp .tmux/.tmux.conf.local .

# Fancy tmux with p key binded to past
echo 'set-option -g default-shell /bin/zsh' >> $HOME/.tmux/.tmux.conf.local
echo 'set -g history-limit 30000' >> $HOME/.tmux/.tmux.conf.local
echo 'set-option -g mouse on' >> $HOME/.tmux/.tmux.conf.local
echo 'setw -g alternate-screen on' >> $HOME/.tmux/.tmux.conf.local
echo 'bind ] run "tmux set-buffer \"$(xclip -o -sel clipboard)\" && tmux paste-buffer"' >> $HOME/.tmux/.tmux.conf.local

## Python3
echo ''
echo '** Python3'
sudo apt-get install python2.7 python-pip python3-dev python3-pip virtualenv -y
sudo apt-get install python3-tk -y
pip3 install numpy virtualenvwrapper

## Create virtualenvs
mkdir $HOME/.virtualenvs
echo '# virtualenv & virtualenvwrapper' >> $HOME/.bashrc
echo 'WORKON_HOME=$HOME/.virtualenvs' >> $HOME/.bashrc
echo 'export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3' >> $HOME/.bashrc
echo 'source /usr/local/bin/virtualenvwrapper.sh' >> $HOME/.bashrc
echo '# virtualenv & virtualenvwrapper' >> $HOME/.zshrc
echo 'WORKON_HOME=$HOME/.virtualenvs' >> $HOME/.zshrc
echo 'export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3' >> $HOME/.zshrc
echo 'source /usr/local/bin/virtualenvwrapper.sh' >> $HOME/.zshrc

## Install OpenCV 4.0.0 from source
echo ''
echo '** OpenCV 4.0.0'
sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"
sudo apt update
sudo apt-get install build-essential ccache cmake python unzip pkg-config -y
sudo apt-get install flake8 pylint -y
sudo apt-get install libgflags-dev libhdf5-dev libhdf5-serial-dev liblmdb-dev libleveldb-dev -y
sudo apt-get install libsnappy-dev libgoogle-glog-dev protobuf-compiler libprotobuf-dev -y
sudo apt-get install libjpeg-dev libpng-dev libtiff-dev -y
sudo apt install libjasper1 libjasper-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev -y
sudo apt-get install libv4l-dev v4l-utils libv4l2rds0 libavresample-dev -y
sudo apt-get install ffmpeg libxvidcore-dev libx264-dev -y
sudo apt-get install libtbb-dev libeigen3-dev liblapacke-dev libblas-dev libopenblas-dev libatlas-base-dev gfortran -y
sudo apt-get install libceres-dev -y
sudo apt-get install libgtk2.0-dev libgtk-3-dev libgtkgl1-dev -y

# GStreamer
# sudo apt install libgstreamer1.0-dev -y
# sudo apt install gstreamer1.0-plugins gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools -y

sudo apt-get install libgstreamer1.0 libgstreamer1.0-dev libgstreamer-plugins-bad1.0-0 libgstreamer-plugins-base1.0-0 libgstreamer-plugins-base1.0-dev

cd ~
wget -O opencv.zip https://github.com/opencv/opencv/archive/4.0.0.zip
wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.0.0.zip
unzip opencv.zip
unzip opencv_contrib.zip
cd ~/opencv-4.0.0
mkdir build
cd build

cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D BUILD_opencv_python3=yes \
	-D INSTALL_PYTHON_EXAMPLES=ON \
	-D WITH_VTK=OFF \
	-D BUILD_TESTS=OFF \
	-D BUILD_PERF_TESTS=OFF \
	-D WITH_CUDA=OFF \
	-D INSTALL_C_EXAMPLES=OFF \
	-D OPENCV_ENABLE_NONFREE=ON \
	-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-4.0.0/modules \
	-D BUILD_EXAMPLES=ON ..
#   -D CMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") \
#     -D PYTHON3_EXECUTABLE=$(which python3) \
#     -D PYTHON3_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
#     -D PYTHON3_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
#     -D PYTHON3_NUMPY_INCLUDE_DIR= $(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())")/numpy/core/include \
# 	-D BUILD_opencv_python3=YES \
# 	-D PYTHON3_EXECUTABLE=/usr/bin/python3 \
# 	-D PYTHON3_INCLUDE_DIRS= /usr/include/python3.6 \
# 	-D PYTHON3_NUMPY_INCLUDE_DIRS= $HOME/.local/lib/python3.6/site-packages/numpy/core/include \
# 	-D PYTHON3_PACKAGES_PATH= $HOME/.local/lib/python3.6/site-packages \
make -j2
sudo make install
sudo ldconfig
cd ~/.virtualenvs/CV/lib/python3.6/site-packages/
ln -s /usr/local/python/cv2 cv2
cd ~

# nginx
sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev -y
sudo apt-get install nginx -y

echo ''
echo '** Setting up the cv virtualenv'
mkdir ~/Sync
mkdir ~/Sync/GitHub
mkvirtualenv -p python3 cv
workon cv

## Basic Computer Vision - OpenCV with contrib >= 3.4.3
pip3 install camera-fusion
sudo apt-get install libusb-1.0.0-dev -y

sudo apt-get autoremove -y
CURRENT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )
if [ -d '$CURRENT_DIR/.a1rb4Ck' ]; then
    echo '** Found $CURRENT_DIR/a1rb4Ck directory.'
    echo '** Installing eduoram certificate.'
    python3 $CURRENT_DIR/.a1rb4Ck/eduroam-linux.py
fi

echo '** Done!'
