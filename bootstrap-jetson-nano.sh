#!/bin/bash
#
# Deep Learning on Jetson Nano
#
#   One command to install all mandatory dependencies.
#
CURRENT_PATH=($PWD)
echo 'This will bootstrap the jetson-nano and install jetson-inference'
echo '** ** ** ** ** ** ** ** ** ** **'

echo '** Updating package repositories'
sudo apt-get update && sudo apt-get upgrade -y

echo "** Setting Jetson Nano to 10W performance mode"
sudo nvpmodel -m 0
# sudo jetson_clocks  # Spin the fan fullspeed

echo ''
echo '** Installing essential packages'
sudo apt-get install -y apt-file cowsay curl direnv flake8 fortune git htop mosh openssl \
    openconnect redis silversearcher-ag snap tmux zsh
zsh

## Oh-My-Zsh!
echo ''
echo '** Oh-My-Zsh!'
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

# dot files
cp ./dotfiles/.direnvrc $HOME/.direnvrc
cp ./dotfiles/.zshrc $HOME/.zshrc

## tmux configuration
echo ''
echo '** tmux'
git clone https://github.com/gpakosz/.tmux.git
ln -s -f .tmux/.tmux.conf
cp .tmux/.tmux.conf.local .

# Fancy tmux with p key binded to past
echo 'set-option -g default-shell /bin/zsh' >> $HOME/.tmux/.tmux.conf.local
echo 'set -g history-limit 30000' >> $HOME/.tmux/.tmux.conf.local
echo 'set-option -g mouse on' >> $HOME/.tmux/.tmux.conf.local
echo 'setw -g alternate-screen on' >> $HOME/.tmux/.tmux.conf.local
echo 'bind ] run "tmux set-buffer \"$(xclip -o -sel clipboard)\" && tmux paste-buffer"' >> $HOME/.tmux/.tmux.conf.local

## Python3
echo ''
echo '** Python3'
sudo apt-get install -y python3-dev libpython3-dev python3-numpy python3-pip virtualenv
pip3 install virtualenvwrapper

## Create virtualenvs
mkdir $HOME/.virtualenvs
echo '# virtualenv & virtualenvwrapper' >> $HOME/.bashrc
echo 'WORKON_HOME=$HOME/.virtualenvs' >> $HOME/.bashrc
echo 'export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3' >> $HOME/.bashrc
echo 'source /usr/local/bin/virtualenvwrapper.sh' >> $HOME/.bashrc
echo '# virtualenv & virtualenvwrapper' >> $HOME/.zshrc
echo 'WORKON_HOME=$HOME/.virtualenvs' >> $HOME/.zshrc
echo 'export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3' >> $HOME/.zshrc
echo 'source /usr/local/bin/virtualenvwrapper.sh' >> $HOME/.zshrc

echo ''
echo '** Setting up the cv virtualenv'
mkvirtualenv -p python3 cv

# Hardware monitoring
echo ''
echo '** Setting up hardware sensors'
sudo apt-get -y install hddtemp lm-sensors indicator-multiload psensor
sudo sensors-detect  # run this to find which sensor is on board
sudo sh -c "echo '# Generated by a previous sensors-detect, plz re-run if needed' >> /etc/modules"
sudo sh -c "echo '# Chip drivers' >> /etc/modules"
sudo sh -c "echo 'coretemp' >> /etc/modules"
sensors

# Custom motd
# 00-header: remove last line, add same last line with green color.
sudo dd if=/dev/null of=/etc/update-motd.d/00-header bs=1 seek=$(echo $(stat --format=%s /etc/update-motd.d/00-header ) - $( tail -n1 /etc/update-motd.d/00-header | wc -c) | bc )
echo 'printf "\\033[1;32mWelcome to %s (%s %s %s)\\n\\033[0m" "$DISTRIB_DESCRIPTION" "$(uname -o)" "$(uname -r)" "$(uname -m)"' | sudo tee -a /etc/update-motd.d/00-header > /dev/null
# 10-help-text: remove info about Canonical docs
sudo chmod -x /etc/update-motd.d/10-help-text
# 20-sysinfo: copied from https://github.com/xtrinch/update-motd.d/blob/master/10-sysinfo
sudo cp ./dotfiles/20-sysinfo /etc/update-motd.d/20-sysinfo
sudo chmod +x /etc/update-motd.d/20-sysinfo
# 50-motd-news: Disable motd news
sudo chmod -x /etc/update-motd.d/50-motd-news
# 80-livepatch: Disable livepatch infos
sudo chmod -x /etc/update-motd.d/80-livepatch
# 99-fortune: Display a fortune quote.
echo '#!/bin/sh\n\necho "\e[00;35m$(/usr/games/fortune | /usr/games/cowsay)\e[00m"\n' | sudo tee /etc/update-motd.d/99-fortune > /dev/null
sudo chmod +x /etc/update-motd.d/99-fortune


echo "** Would you like to setup a swap on a USB key?" input
case $input in
        [yY][eE][sS]|[yY])
    echo 'Yes!'

    read -p "Enter the USB key NAME: " USBKEY_NAME
    # USBKEY_NAME = 'toto'
    echo "  Will set up a swapfile on an USB key named "$USBKEY_NAME
    echo "WARNING: you should really use an SSD instead.. "$USBKEY_NAME" will BURN."
    read -p "Enter the swap size in Gbytes: " SWAP_SIZE
    echo " * Setting up a "$SWAP_SIZE"Gb swapfile on an USB key named "$USBKEY_NAME
    sudo fallocate -l ${SWAP_SIZE}G /media/${USERHOME}/${USBKEY_NAME}/swapfile
    cd /media/${USERHOME}/${USBKEY_NAME}/
    ls -lh swapfile
    sudo chmod 600 swapfile
    ls -lh swapfile
    sudo mkswap swapfile
    sudo swapon swapfile
    swapon -s
    cd ${CURRENT_PATH}
    # To remove the swapfile:
    # sudo swapoff /tmp/swapfile
    # rm -f /tmp/swapfile
    # nano /etc/fstab
    ;;
        [nN][oO]|[nN])
    echo 'No.'
            ;;
           *)
    echo 'Invalid input.. so No swap.'
    ;;
esac


# Install gstreamer
echo ''
echo "** Install gstreamer requirements"
sudo apt-get install libgstreamer1.0 libgstreamer1.0-dev libgstreamer-plugins-bad1.0-0 libgstreamer-plugins-base1.0-0 libgstreamer-plugins-base1.0-dev


# Install jetson-inference
echo ''
echo "** Install jetson-inference requirements"
sudo apt-get install -y build-essential ccache cmake git unzip pkg-config zsh
sudo apt-get install -y libpython3-dev python3-numpy python3-pip virtualenv -y

# GstTracer
sudo apt-get install -y graphviz libgraphviz-dev octave epstool babeltrace
cd ~
git clone https://github.com/RidgeRun/gst-shark
cd gst-shark
./autogen.sh --prefix /usr/ --libdir /usr/lib/aarch64-linux-gnu/
make -j3
sudo make install
cd $CURRENT_PATH
sudo ldconfig

git clone https://github.com/dusty-nv/jetson-inference
cd jetson-inference
git submodule update --init
mkdir build
cd build
cmake ../

# Run the Model Downloader tool again
# cd jetson-inference/tools
# ./download-models.sh

# Run the Pytorch install tool again
# cd jetson-inference/build
# ./install-pytorch.sh

make -j3
sudo make install
cd $CURRENT_PATH
sudo ldconfig


# Install opencv-4.1.1 from source
echo ''
echo "** Would you like to compile opencv-4.1 from source (take 2Hours)?" input
case $input in
        [yY][eE][sS]|[yY])
    echo 'Yes!'
    sh ./jetson-nano/install_opencv4.1.1_Nano.sh
    ;;
        [nN][oO]|[nN])
    echo 'No.'
            ;;
           *)
    echo 'Invalid input.. so No swap.'
    ;;
esac

echo ''
echo '** DONE'

